# Build flant/loghouse-[dashboard,fluentd,tabix]-dev images and push
# to hub.docker.com when PR is labeled
# with label ":robot: build dev images" (id=1939241618)
name: Publish dev images
on:
  pull_request:
    types: [labeled]
env:
  GO111MODULE: on

jobs:
  stub:
    name: Empty job to prevent workflow fail
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.label.id != 1939241618 # not ':robot: build dev images' label
    steps:
      - name: stub action
        run: ": This job is used to prevent the workflow to fail when all other jobs are skipped."
      #- name: dump label event
      #  run: cat $GITHUB_EVENT_PATH
      #- name: dump envs
      #  run: export

  unlabel:
    name: Unlabel
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.label.id == 1939241618 # ':robot: build dev images' label
    steps:
      - uses: actions/github-script@0.3.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const eventLabelName = '${{github.event.label.name}}'
            const response = await github.issues.listLabelsOnIssue({...context.issue})
            for (const label of response.data) {
              if (label.name === eventLabelName) {
                github.issues.removeLabel({...context.issue, name: eventLabelName})
                break
              }
            }

  build_dev_image:
    name: Dev image
    strategy:
      fail-fast: false
      matrix:
        component:
          - dashboard
          - tabix
          - fluentd
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.label.id == 1939241618 # ':robot: build dev images' label
    steps:
      - uses: actions/checkout@v1

      - name: Prepare environment
        env:
          COMPONENT: ${{ matrix.component }}
          IMAGE_NAME: flant/loghouse-${{ matrix.component }}-dev
        run: |
          imageTag=${IMAGE_NAME}:${GITHUB_HEAD_REF}
          echo ::set-env name=imageTag::${imageTag}

          buildDir=.
          case $COMPONENT in
            tabix)
              buildDir="images/tabix.ui"
              ;;
            fluentd)
              buildDir="images/fluentd"
              ;;
          esac
          echo ::set-env name=buildDir::${buildDir}

      - name: Build '${{ matrix.component }}' image
        run: |
          echo Build $imageTag using $buildDir/Dockerfile
          cd $buildDir
          docker build -t $imageTag -f Dockerfile .

      - name: Push '${{ matrix.component }}' image
        run: |
          docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASS }}
          docker push $imageTag
